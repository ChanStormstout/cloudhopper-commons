Cloudhopper, Inc.
http://www.cloudhopper.com/
Commons Charset Library
--------------------------------------------------------------------------------
2.0 - 2011-03-14
  * Migrated build system from Ant to Maven
  * Deleted all legacy Ant build files (build.xml, Dependency.txt)
  * Added Apache license to top of all source files
  * Moved demo source code from src/demo/java into src/test/java directory and
    placed in separate "demo" package.
  * Added "Makefile" with targets that match previous demo ant tasks.

1.8 - 2011-02-14
  * Added MobileTextUtil.replaceAccentedChars to downgrade accented chars with
    their ascii equivalent.  For example, an accented e to a non-accented e.
  * Added additional ascii equivalents for unicode chars that MS-Word typically
    uses for text.

1.7 - 2011-01-08
  * Added UTF8Charset.calculateByteLength method to calculate the byte length
    required to convert a Java String into an array of UTF-8 bytes. Highly
    efficient method since it doesn't require any byte array allocation.

1.6 - 2010-12-16
  * Added normalize() feature: filters a source Java string into a new Java
    string with any unsupported characters converted into ?'s.
  * Added MobileTextUtil utility class: helps replace unicode characters with
    their ascii equivalents (e.g. smart quotes into dumb quotes)
  * Fixed extra E on name of charset for AIRWIDE.
  * Modified log4j.properties to ouput UTF-8 to console during demos.
  * Fixed unit tests with encoding issue on linux vs. mac os x due to encoding
    of unicode chars in the source files.

1.5 - 2010-08-23
  * Added support for ISO-8859-15 charset
  * Added support for VFTR-GSM charset which is a custom charset specifically
    for the Vodafone Turkey SMSC.

1.4 - 2010-06-08
  * Added aliases for GSM -> GSM8, PACKED-GSM -> GSM7, AIRWIDE-IA5 -> AIRWIDE-GSM
  * Added support for "VFD2-GSM" which is a custom charset Vodafone D2 uses to
    interpret the @ and some German letters from the standard GSM charset.
  * Fixed bug with some charsets modifying the byte array parameter values in
    the decoding process.  Wrote a unit test to validate common byte values
    commonly replaced does not actually change the byte array.
  * Added extra unit tests to check for null parameters against every charset

1.3 - 2010-05-16
  * Added support for verfiying a Java String can be represented by the
    GSMCharset.  Provides a way of automatically figuring out the correct
    data coding scheme to use when forwarding an SMS to an operator.
  * Fixed deprecated methods used in ch-commons-util

1.2 - 2010-02-28
  * Added support for Airwide-IA5 charset

1.1 - 2010-02-21
  * Added support for charset conversions including GSM, PackedGSM, etc.

1.0 - 2010-02-11
  * Initial release
